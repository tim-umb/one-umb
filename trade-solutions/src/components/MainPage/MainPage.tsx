/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Typography, Divider, Button, SvgIcon } from '@mui/material';
import { styled } from '@mui/material/styles';
import UmbLogo from 'src/components/UmbLogo/UmbLogo';
import Tab from 'src/components/Tab/Tab';
import ActionButton from 'src/components/ActionButton/ActionButton';
import DataGridAggregation from 'src/components/DataGridAggregation/DataGridAggregation';
import DataGridHeader from 'src/components/DataGridHeader/DataGridHeader';
import DataGridCell from 'src/components/DataGridCell/DataGridCell';
import TableFooter from 'src/components/TableFooter/TableFooter';
import { MainPageProps } from 'src/types';

const MainPage1: any = styled('div')({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  height: `982px`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `24px 0px 0px 0px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
});

const Frame25: any = styled('div')(({ theme }: any) => ({
  backgroundColor: `rgba(238, 238, 238, 1)`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `10px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  zIndex: `3`,
  margin: `0px`,
}));

const Frame35: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  maxWidth: '1440px',
});

const Typography1: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: `rgba(0, 0, 0, 0.87)`,
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `16px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `150%`,
  textTransform: `none`,
}));

const Frame36: any = styled('div')({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  zIndex: `2`,
  margin: `0px`,
});

const Frame28: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  maxWidth: '1440px',
});

const Frame27: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `24px 0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const UmbLogo1: any = styled(UmbLogo)(({ theme }: any) => ({
  width: `150px`,
  height: `36px`,
  margin: `0px`,
}));

const Typography2: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px 0px 0px 30px`,
  color: `rgba(0, 60, 110, 1)`,
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `20px`,
  letterSpacing: `0.25px`,
  textDecoration: `none`,
  lineHeight: `123.50000143051147%`,
  textTransform: `none`,
}));

const Frame20: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `space-between`,
  alignItems: `flex-start`,
  padding: `8px 0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Tab1: any = styled(Tab)(({ theme }: any) => ({
  margin: `0px`,
}));

const Tab2: any = styled(Tab)(({ theme }: any) => ({
  margin: `0px`,
}));

const Tab3: any = styled(Tab)(({ theme }: any) => ({
  margin: `0px`,
}));

const Tab4: any = styled(Tab)(({ theme }: any) => ({
  margin: `0px`,
}));

const Tab5: any = styled(Tab)(({ theme }: any) => ({
  margin: `0px`,
}));

const Frame33: any = styled('div')(({ theme }: any) => ({
  backgroundColor: `rgba(238, 238, 238, 1)`,
  boxShadow: `0px 2px 4px rgba(0, 0, 0, 0.2), 0px 4px 5px rgba(0, 0, 0, 0.14), 0px 1px 10px rgba(0, 0, 0, 0.12)`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `8px 0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  zIndex: `1`,
  margin: `0px`,
}));

const Frame31: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `space-between`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  maxWidth: '1440px',
});

const Frame30: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Frame29: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px 0px 0px 10px`,
});

const Typography3: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: `rgba(0, 0, 0, 0.87)`,
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `24px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  lineHeight: `116.70000553131104%`,
  textTransform: `none`,
}));

const Typography4: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(0, 0, 0, 0.87)`,
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `14px`,
  letterSpacing: `0.17000000178813934px`,
  textDecoration: `none`,
  lineHeight: `142.99999475479126%`,
  textTransform: `none`,
  margin: `0px`,
}));

const Frame32: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const ActionButton1: any = styled(ActionButton)(({ theme }: any) => ({
  margin: `0px`,
}));

const ActionButton2: any = styled(ActionButton)(({ theme }: any) => ({
  margin: `0px 0px 0px 4px`,
}));

const ActionButton3: any = styled(ActionButton)(({ theme }: any) => ({
  margin: `0px 0px 0px 4px`,
}));

const ActionButton4: any = styled(ActionButton)(({ theme }: any) => ({
  margin: `0px 0px 0px 4px`,
}));

const ActionButton5: any = styled(ActionButton)(({ theme }: any) => ({
  margin: `0px 0px 0px 4px`,
}));

const Frame34: any = styled('div')(({ theme }: any) => ({
  backgroundColor: `rgba(238, 238, 238, 1)`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `16px 0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flex: `1`,
  zIndex: `0`,
  margin: `0px`,
}));

const Frame21: any = styled('div')(({ theme }: any) => ({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  boxShadow: `0px 2px 4px rgba(0, 0, 0, 0.2), 0px 4px 5px rgba(0, 0, 0, 0.14), 0px 1px 10px rgba(0, 0, 0, 0.12)`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  maxWidth: '1440px',
}));

const Frame16: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Frame17: any = styled('div')(({ theme }: any) => ({
  backgroundColor: `rgba(0, 60, 110, 1)`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `12px 16px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Typography5: any = styled(Typography)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: `rgba(255, 255, 255, 1)`,
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `16px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `150%`,
  textTransform: `none`,
}));

const Frame18: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const AchFIleGrid: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const DataGridAggregation1: any = styled(DataGridAggregation)(
  ({ theme }: any) => ({
    alignSelf: `stretch`,
    margin: `0px`,
  })
);

const Frame: any = styled('div')(({ theme }: any) => ({
  backgroundColor: `rgba(238, 238, 238, 1)`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 6px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const DataGridHeader1: any = styled(DataGridHeader)(({ theme }: any) => ({
  flex: `1`,
  height: `56px`,
  margin: `0px`,
}));

const DataGridHeader2: any = styled(DataGridHeader)(({ theme }: any) => ({
  flex: `1`,
  height: `56px`,
  margin: `0px`,
}));

const DataGridHeader3: any = styled(DataGridHeader)(({ theme }: any) => ({
  width: `460px`,
  height: `56px`,
  margin: `0px`,
}));

const DataGridHeader4: any = styled(DataGridHeader)(({ theme }: any) => ({
  width: `200px`,
  height: `56px`,
  margin: `0px`,
}));

const DataGridHeader5: any = styled(DataGridHeader)(({ theme }: any) => ({
  width: `130px`,
  height: `56px`,
  margin: `0px`,
}));

const DataGridHeader6: any = styled(DataGridHeader)(({ theme }: any) => ({
  width: `130px`,
  height: `56px`,
  margin: `0px`,
}));

const Frame4: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 6px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const DataGridCell1: any = styled(DataGridCell)(({ theme }: any) => ({
  flex: `1`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell2: any = styled(DataGridCell)(({ theme }: any) => ({
  flex: `1`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell3: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `460px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell4: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `200px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell5: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `130px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell6: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `130px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell7: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `160px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell8: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `160px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell9: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `160px`,
  height: `52px`,
  margin: `0px`,
}));

const DividerHorizontal: any = styled(Divider)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Frame9: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 6px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const DataGridCell10: any = styled(DataGridCell)(({ theme }: any) => ({
  flex: `1`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell11: any = styled(DataGridCell)(({ theme }: any) => ({
  flex: `1`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell12: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `460px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell13: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `200px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell14: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `130px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell15: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `130px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell16: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `160px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell17: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `160px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell18: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `160px`,
  height: `52px`,
  margin: `0px`,
}));

const DividerHorizontal1: any = styled(Divider)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Frame10: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 6px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const DataGridCell19: any = styled(DataGridCell)(({ theme }: any) => ({
  flex: `1`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell20: any = styled(DataGridCell)(({ theme }: any) => ({
  flex: `1`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell21: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `460px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell22: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `200px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell23: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `130px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell24: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `130px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell25: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `160px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell26: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `160px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell27: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `160px`,
  height: `52px`,
  margin: `0px`,
}));

const DividerHorizontal2: any = styled(Divider)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Frame11: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 6px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const DataGridCell28: any = styled(DataGridCell)(({ theme }: any) => ({
  flex: `1`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell29: any = styled(DataGridCell)(({ theme }: any) => ({
  flex: `1`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell30: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `460px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell31: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `200px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell32: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `130px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell33: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `130px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell34: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `160px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell35: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `160px`,
  height: `52px`,
  margin: `0px`,
}));

const DataGridCell36: any = styled(DataGridCell)(({ theme }: any) => ({
  width: `160px`,
  height: `52px`,
  margin: `0px`,
}));

const DividerHorizontal3: any = styled(Divider)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
}));

const TableFooter1: any = styled(TableFooter)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Frame8: any = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Button1: any = styled(Button)(({ theme }: any) => ({
  margin: `0px`,
  color: `rgba(255, 255, 255, 1)`,
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `500`,
  fontSize: `14px`,
  letterSpacing: `0.4000000059604645px`,
  textDecoration: `none`,
  lineHeight: `24px`,
  textTransform: `uppercase`,
}));

const Button2: any = styled(Button)(({ theme }: any) => ({
  margin: `0px 0px 0px 12px`,
  color: `rgba(255, 255, 255, 1)`,
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `500`,
  fontSize: `14px`,
  letterSpacing: `0.4000000059604645px`,
  textDecoration: `none`,
  lineHeight: `24px`,
  textTransform: `uppercase`,
}));

function MainPage(props: MainPageProps): JSX.Element {
  return (
    <MainPage1 className={props.className}>
      <Frame25>
        <Frame35>
          <Typography1 variant={'body1'} gutterBottom={false}>
            {'Last Login: 12/06/2023 - 14:00 (Central Time)'}
          </Typography1>
        </Frame35>
      </Frame25>
      <Frame36>
        <Frame28>
          <Frame27>
            <UmbLogo1 />
            <Typography2 variant={'body1'} gutterBottom={false}>
              {'DIRECT'}
            </Typography2>
          </Frame27>
          <Frame20>
            <Tab1 />
            <Tab2 />
            <Tab3 />
            <Tab4 />
            <Tab5 />
          </Frame20>
        </Frame28>
      </Frame36>
      <Frame33>
        <Frame31>
          <Frame30>
            <Frame29>
              <Typography3 variant={'body1'} gutterBottom={false}>
                {'TRADE SOLUTIONS'}
              </Typography3>
              <Typography4>{`View and upload trade templates`}</Typography4>
            </Frame29>
          </Frame30>
          <Frame32>
            <ActionButton1 />
            <ActionButton2 />
            <ActionButton3 />
            <ActionButton4 />
            <ActionButton5 />
          </Frame32>
        </Frame31>
      </Frame33>
      <Frame34>
        <Frame21>
          <Frame16>
            <Frame17>
              <Typography5 variant={'body1'} gutterBottom={false}>
                {'TRADE SOLUTIONS'}
              </Typography5>
            </Frame17>
            <Frame18>
              <AchFIleGrid>
                <DataGridAggregation1 />
                <Frame>
                  <DataGridHeader1 />
                  <DataGridHeader2 />
                  <DataGridHeader3 />
                  <DataGridHeader4 />
                  <DataGridHeader5 />
                  <DataGridHeader6 />
                </Frame>
                <Frame4>
                  <DataGridCell1 />
                  <DataGridCell2 />
                  <DataGridCell3 />
                  <DataGridCell4 />
                  <DataGridCell5 />
                  <DataGridCell6 />
                  {false && <DataGridCell7 />}
                  {false && <DataGridCell8 />}
                  {false && <DataGridCell9 />}
                </Frame4>
                <DividerHorizontal orientation="horizontal" />
                <Frame9>
                  <DataGridCell10 />
                  <DataGridCell11 />
                  <DataGridCell12 />
                  <DataGridCell13 />
                  <DataGridCell14 />
                  <DataGridCell15 />
                  {false && <DataGridCell16 />}
                  {false && <DataGridCell17 />}
                  {false && <DataGridCell18 />}
                </Frame9>
                <DividerHorizontal1 orientation="horizontal" />
                <Frame10>
                  <DataGridCell19 />
                  <DataGridCell20 />
                  <DataGridCell21 />
                  <DataGridCell22 />
                  <DataGridCell23 />
                  <DataGridCell24 />
                  {false && <DataGridCell25 />}
                  {false && <DataGridCell26 />}
                  {false && <DataGridCell27 />}
                </Frame10>
                <DividerHorizontal2 orientation="horizontal" />
                <Frame11>
                  <DataGridCell28 />
                  <DataGridCell29 />
                  <DataGridCell30 />
                  <DataGridCell31 />
                  <DataGridCell32 />
                  <DataGridCell33 />
                  {false && <DataGridCell34 />}
                  {false && <DataGridCell35 />}
                  {false && <DataGridCell36 />}
                </Frame11>
                <DividerHorizontal3 orientation="horizontal" />
                <TableFooter1 />
                {false && (
                  <Frame8>
                    <Button1
                      size={'medium'}
                      color={'primary'}
                      disabled={false}
                      variant={'contained'}
                    >
                      {'New Search'}
                    </Button1>
                    <Button2
                      size={'medium'}
                      color={'primary'}
                      disabled={false}
                      variant={'contained'}
                    >
                      {'Download'}
                    </Button2>
                  </Frame8>
                )}
              </AchFIleGrid>
            </Frame18>
          </Frame16>
        </Frame21>
      </Frame34>
    </MainPage1>
  );
}

export default MainPage;
